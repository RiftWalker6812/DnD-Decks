// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var jProfile = JProfile.FromJson(jsonString);

namespace QuickType
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using Rpg_Decks.JsonProfiling;
    using Rpg_Decks.Card_System;

    public partial class JProfile
    {
        [JsonProperty("ProType")]
        public RootProfile ProType { get; set; }
    }

    public partial class ProType
    {
        [JsonProperty("ProfileName")]
        public string ProfileName { get; set; }

        [JsonProperty("HitDie")]
        public string HitDie { get; set; }

        [JsonProperty("RpgClass")]
        public string RpgClass { get; set; }

        [JsonProperty("Level")]
        public int Level { get; set; }

        [JsonProperty("XpValue")]
        public float XpValue { get; set; }

        [JsonProperty("HpValue")]
        public int HpValue { get; set; }

        [JsonProperty("Proficiency")]
        public int Proficiency { get; set; }      

        [JsonProperty("HpMax", NullValueHandling = NullValueHandling.Ignore)]
        public int HpMax { get; set; }

        [JsonProperty("SpellCardsV", NullValueHandling = NullValueHandling.Ignore)]
        public List<Spell> SpellCardsV { get; set; }

        [JsonProperty("ItemCardsV", NullValueHandling = NullValueHandling.Ignore)]
        public List<Item> ItemCardsV { get; set; }
    }  

    public partial class JProfile
    {
        public static JProfile FromJson(string json) => JsonConvert.DeserializeObject<JProfile>(json, QuickType.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this JProfile self) => JsonConvert.SerializeObject(self, Formatting.Indented, QuickType.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
